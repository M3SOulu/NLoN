% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NLoN.R, R/model.R
\docType{package}
\name{NLoN}
\alias{NLoN}
\alias{NLoN-package}
\alias{NLoN}
\title{NLoN: Natural Language or Not}
\usage{
NLoN(data, lambda = NULL, type = "class", features = TriGramsAndFeatures,
  ...)
}
\arguments{
\item{data}{A data.frame containing the training and test data.}

\item{lambda}{Lambda parameter to pass to
\code{\link[glmnet]{predict.glmnet}}.}

\item{type}{Type of prediction made by
\code{\link[glmnet]{predict.glmnet}}.}

\item{features}{A function computing the feature values (a matrix,
list of numeric vectors or data.frame) or a list of functions
computing individual feature values.}

\item{...}{Additional parameters to pass to \code{NLoNModel}.}
}
\value{
A vector of length \code{sum(is.na(data$response))} with
  the prediction of the test data.
}
\description{
NLoN identifies whether text lines are natural language or not
using a glmnet model with simple text features and character
3-grams.

Train a NLoN model and gives the predicton for the data without
response.
}
\details{
The data.frame must contain a column \code{text} with both training
and test data and a column response with the response value (factor
with levels NL and Not). The response is NA for test data.
}
\examples{

## Training data provided in the package.
data(nlon.data)

## Build a model with glmnet
model <- with(nlon.data, NLoNModel(text, rater2, TriGramsAndFeatures))

## Use the model to preidct new data.
topredict <- c("This is natural language.", "not(natural, language);")
NLoNPredict(model, topredict, 0.1, features=FeatureExtraction)

## Train and predict in a single function call.
NLoN(rbind(nlon.data[, list(text, response=rater2)],
          list(text=topredict), fill=TRUE),
    0.1, features=FeatureExtraction)

}
\seealso{
\code{\link{NLoNModel}}

\code{\link{NLoNPredict}}

\code{\link[glmnet]{glmnet}}

\code{\link[glmnet]{predict.glmnet}}
}
